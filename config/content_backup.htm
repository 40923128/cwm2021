<h1>First</h1>
<p><br/><br/>About</p>
<p>This is <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<p>目前的 cmsimde 在編輯器下方新增一個 csave 按鈕, 意即 collabrative save, 當動態網際管理系統在多人同時維護登入維護網頁內容時, 編輯各頁面時段, 該頁面可能已經改版, 因此使用 csave 按鈕存檔時, 會導入當下最新的該頁面內容, 並試圖與編輯中的頁面內容進行合併.</p>
<p>使用 csave 按鈕存檔無法刪除頁面資料.</p>
<p>使用 Edit All 模式, 無法使用 csave 按鈕（尚未測試)</p>
<h1>Homework(w1-w10)</h1>
<h2>W3</h2>
<p>1.git clone --recouse-submodules (URL).git (any) 可將檔案資料夾名字改成(any)</p>
<p>2.404erro:(1)倉儲沒有任何東西</p>
<p>               (2)倉儲版本不一，EX-git check (newest ID)可以將cmsimde檔案版本更新至(newest ID)</p>
<h2>W4</h2>
<p>1.擷取課表(班級)-4設一甲</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system()
import os
# for geting html file path
import pathlib

# for pythn 3.9
proxy = 'http://[2001:288:6004:17::69]:3128'

os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy

'''
url:  'class_ajax.php',
data: { pselyr: pselyr, pselclss: pselclss
'''
semester = '1092'
classno = '42311'
column = True
if semester == None:
    semester = '1091'
if classno == None:
    # 42311 is 設一甲
    classno = '42311'
    
headers = {'X-Requested-With': 'XMLHttpRequest'}

url = 'https://qry.nfu.edu.tw/class_ajax.php'
post_var = {'pselyr': semester, 'pselclss': classno}

result = requests.post(url, data = post_var, headers = headers)

soup = bs4.BeautifulSoup(result.content, 'lxml')

# 先除掉所有 anchor
for a in soup.findAll('a'):
    # bs3 語法
    #a.replaceWithChildren()
    # bs4 語法, 將標註與內容拆開
    a.unwrap()
    
# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})

# 重建 table, 設定邊線為 1 pixel
output = "&lt;table border='1'&gt;"

for i in table.contents:
    # 利用 replace 復原  
    output += str(i).replace(" ", " ")
output += "&lt;/table&gt;"
# print(output)
# 將 output 寫入 w1_class_local.html
with open("w1_class_local.html", "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\w1_class_local.html")</pre>
<h2>W5</h2>
<p>update add offline cmsimde</p>
<p>1.cd (name)/cmsimde</p>
<p>2.type "git pull origin master"</p>
<p>3.copy cmsimde&gt;up_dair&gt;{cms.bat、acp.bat、http、http-server.py、localhost.crt、localhost.key}</p>
<p>4.cover into (name)</p>
<h2>W6、W7 (remote Heroku)</h2>
<p>1.create heroku account</p>
<p>2.create heroku repositories</p>
<p>3.download heroku.7z&amp;<span>uncompress filename to Y:home</span></p>
<p><span>4.add  command ipv6.bat</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">set path_heroku=%Disk%:\heroku\bin;
</pre>
<p>&amp;</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">REM for heroku login
set HTTP_PROXY=http://[2001:288:6004:17::53]:3128
set HTTPS_PROXY=http://[2001:288:6004:17::53]:3128</pre>
<p>&amp;</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">path=%Disk%:;%path_python%;%path_portablegit%;%path_heroku%;%GIT_SSH%;%path%;
</pre>
<p>5.check heroku version on ipv6.bat</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">heroku version</pre>
<p>6.login heroku on ipv6.bat</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">heroku login -i
Email:
Password:</pre>
<p>7.enter own github repositories</p>
<p>8.link heroku <span>repositories</span> and github <span>repositories</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">heroku git:remote -a (heroku repositories name)</pre>
<h2>W8</h2>
<p>1.clone <a href="https://github.com/mdecourse/nfulist.git">https://github.com/mdecourse/nfulist.git</a></p>
<p>2.create  new "wsgi.py"</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system
import os
# for geting html file path
import pathlib
# 以下因應改為 Heroku based 程式所需導入模組,  修改步驟 1/6
from flask import Flask, request 
from flask_cors import CORS
 
 
# 修改步驟 2/6 , 加入 Flask 相關物件設定
app = Flask(__name__)
# 此一設定可以讓程式跨網域擷取資料
CORS(app)
 
# for pythn 3.9,  在近端測試時仍需要設定 proxy, 若使用 Python 3.8 執行則會自動使用系統的 Proxy 設定

'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''
 
# 修改步驟 3/6, 試著將程式改為網際模式, 需要套用 Flask 的網際 decorator
@app.route('/')
def timeTableList():
    '''
    semester = '1092'
    classroomno = 'BGA0810'
    column = True
    '''
    semester =  request.args.get('semester')
    classroomno = request.args.get('classroomno')
    
    if semester == None:
        semester = '1092'
    if classroomno == None:
        # BGA0810 電腦輔助設計室
        classroomno = 'BGA0810'
         
    headers = {'X-Requested-With': 'XMLHttpRequest'}
 
    url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
    post_var = {'pselyr': semester, 'pselclssroom': classroomno}
 
    result = requests.post(url, data = post_var, headers = headers)
 
    soup = bs4.BeautifulSoup(result.content, 'lxml')
 
    # 先除掉所有 anchor
    for a in soup.findAll('a'):
        # bs3 語法
        #a.replaceWithChildren()
        # bs4 語法, 將標註與內容拆開
        a.unwrap()
 
    # 根據輸出設定, 取出 class='tbcls' 的 table 資料
    table = soup.find('table', {'class': 'tbcls'})
 
    # 重建 table, 設定邊線為 1 pixel
    output = "&lt;table border='1'&gt;"
 
    for i in table.contents:
        # 利用 replace 復原  
        output += str(i).replace(" ", " ")
    output += "&lt;/table&gt;"
    #print(output)
    # 修改步驟 5/6 , 因為已經將原先可列印出程式的步驟改為 function, 因此必須以 return 將擷取到的網頁資料傳回
    return output
     
# 修改步驟 4/6 , 因為改寫為網際程式後, 下列將內容存檔並自動呼叫 Firefox 的程式碼不再適用, 必須蓋掉
'''
# 將 output 寫入 w1_classroom.html
fileName = "w1_classroom.html"
with open(fileName, "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\" + fileName)
'''
 
# 修改步驟 6/6, 配合網際程式啟動,  以及 Python 程式執行與納入其他程式執行的特定進行配置
 
if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)</pre>
<p>3.cove folder nfulist's wsgi.py</p>
<p>4.cd nfulist(cmd)</p>
<p>5.set step:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">heroku login -i
(enter account)
heroku git:remote -a nfuclassno-28
git config --global user.email "email"
git config --global user.name "name"
git add .
git commit -am "version"
git push heroku
</pre>
<p>6.enter heroku and oper link(mine):<a class="hk-link" href="https://nfuclassno-28.herokuapp.com/" target="_blank">https://nfuclassno-28.herokuapp.com/</a></p>
<p>7.URL+(?classroomno:"BGAXXXX") can find <span>room schedule</span></p>
<h2>W10</h2>
<p>Proxy lock problem:</p>
<p>1.Open putty then setting "Proxy" username and password.</p>
<p>2.save&amp;open test</p>
<p>3.setting gitconfig ipv6</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">[http]
proxy=http://USERNAME:PASSWORD@PROXYIP:PROXYPORT</pre>
<p>Save and use regedit:</p>
<p>1.type regedit(cmd)</p>
<p>2.Export SimonTatham</p>
<p>3.Next time just type "reg import ?:\(save address)\?.reg" (cmd)</p>
<p>Edit .reg:</p>
<p>1.Ues python then open .reg</p>
<p>2.search github</p>
<p>3.change username&amp;password <span>parameter</span></p>
<p><span>Heroku proxy setting:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">REM for heroku login
set HTTP_PROXY=http://(username:password)@[2001:288:6004:17::69]:3128
set HTTPS_PROXY=http://(username:password)@[2001:288:6004:17::69]:3128</pre>
<p></p>
<h1>Homework(w11-w20)</h1>
<h2>W11</h2>
<p><strong>Run RDK on python</strong></p>
<p> 1.Download RobotRDK&amp;<span>RoboDK pick and place rdk and .py</span></p>
<p><span></span>2.Run "Python-robodk-Install.bat" on python</p>
<p>3.Open tool and .<span>rdk on RobotRDK</span></p>
<p><span>4.Sitting iPv4 web</span></p>
<p><span><img alt="" height="328" src="/images/Screenshot 2021-05-06 113223.png" width="533"/></span></p>
<p><span>5.Run .py-&gt;RDKlink('IPV4')</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># KMOLab Portable RoboDK pick and place
from robolink import *    # API to communicate with robodk
from robodk import *      # robodk robotics toolbox

# Setup global parameters
BALL_DIAMETER = 100 # diameter of one ball
APPROACH = 100      # approach distance to grab each part, in mm
nTCPs = 6           # number of TCP's in the tool

#----------------------------------------------
# Function definitions

def box_calc(BALLS_SIDE=4, BALLS_MAX=None):
    """Calculate a list of points (ball center) as if the balls were stored in a box"""
    if BALLS_MAX is None: BALLS_MAX = BALLS_SIDE**3
    xyz_list = []
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE):
            for j in range(BALLS_SIDE):
                xyz_list = xyz_list + [[(i+0.5)*BALL_DIAMETER, (j+0.5)*BALL_DIAMETER, (h+0.5)*BALL_DIAMETER]]
                if len(xyz_list) &gt;= BALLS_MAX:
                    return xyz_list
    return xyz_list

def pyramid_calc(BALLS_SIDE=4):
    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""
    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)
    BALL_DIAMETER = 100
    xyz_list = []
    sqrt2 = 2**(0.5)
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE-h):
            for j in range(BALLS_SIDE-h):
                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2
                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]
    return xyz_list

def balls_setup(frame, positions):
    """Place a list of balls in a reference frame. The reference object (ball) must have been previously copied to the clipboard."""
    nballs = len(positions)
    step = 1.0/(nballs - 1)
    for i in range(nballs):
        newball = frame.Paste()
        newball.setName('ball ' + str(i)) #set item name
        newball.setPose(transl(positions[i])) #set item position with respect to parent
        newball.setVisible(True, False) #make item visible but hide the reference frame
        newball.Recolor([1-step*i, step*i, 0.2, 1]) #set RGBA color

def cleanup_balls(parentnodes):
    """Delete all child items whose name starts with \"ball\", from the provided list of parent items."""
    todelete = []
    for item in parentnodes:
        todelete = todelete + item.Childs()

    for item in todelete:
        if item.Name().startswith('ball'):
            item.Delete()

def TCP_On(toolitem, tcp_id):
    """Attach the closest object to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""
    toolitem.AttachClosest()
    toolitem.RDK().RunMessage('Set air valve %i on' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_On(%i)' % (tcp_id+1));
        
def TCP_Off(toolitem, tcp_id, itemleave=0):
    """Detaches the closest object attached to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""
    toolitem.DetachAll(itemleave)
    toolitem.RDK().RunMessage('Set air valve %i off' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_Off(%i)' % (tcp_id+1));


#----------------------------------------------------------
# The program starts here:

# Any interaction with RoboDK must be done through RDK:
RDK = Robolink('192.168.19.159')

# Turn off automatic rendering (faster)
RDK.Render(False)

#RDK.Set_Simulation_Speed(500); # set the simulation speed

# Gather required items from the station tree
robot = RDK.Item('Fanuc M-710iC/50')
robot_tools = robot.Childs()
#robottool = RDK.Item('MainTool')
frame1 = RDK.Item('Table 1')
frame2 = RDK.Item('Table 2')

# Copy a ball as an object (same as CTRL+C)
ballref = RDK.Item('reference ball')
ballref.Copy()

# Run a pre-defined station program (in RoboDK) to replace the two tables
prog_reset = RDK.Item('Replace objects')
prog_reset.RunProgram()

# Call custom procedure to remove old objects
cleanup_balls([frame1, frame2])

# Make a list of positions to place the objects
frame1_list = pyramid_calc(4)
frame2_list = pyramid_calc(4)

# Programmatically place the objects with a custom-made procedure
balls_setup(frame1, frame1_list)

# Delete previously generated tools
for tool in robot_tools:
    if tool.Name().startswith('TCP'):
        tool.Delete()
        
# Calculate tool frames for the suction cup tool of 6 suction cups
TCP_list = []
for i in range(nTCPs):
    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)
    TCPi = robot.AddTool(TCPi_pose, 'TCP %i' % (i+1))
    TCP_list.append(TCPi)

TCP_0 = TCP_list[0]

# Turn on automatic rendering
RDK.Render(True)

# Move balls    
robot.setPoseTool(TCP_list[0])
nballs_frame1 = len(frame1_list)
nballs_frame2 = len(frame2_list)
idTake = nballs_frame1 - 1
idLeave = 0
idTCP = 0
target_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)

while idTake &gt;= 0:
    # ------------------------------------------------------------------
    # first priority: grab as many balls as possible
    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -&gt; nTCPs)
    ntake = min(nTCPs, idTake + 1)

    # approach to frame 1
    robot.setPoseFrame(frame1)
    robot.setPoseTool(TCP_0)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.MoveJ(target_app_frame)

    # grab ntake balls from frame 1
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted
        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idTake = idTake - 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_On(TCPi, i)
        robot.MoveL(target_app)
 
    # ------------------------------------------------------------------
    # second priority: unload the tool     
    # approach to frame 2 and place the tool balls into table 2
    robot.setPoseTool(TCP_0)
    robot.MoveJ(target_app_frame)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.setPoseFrame(frame2)    
    robot.MoveJ(target_app_frame)
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        if idLeave &gt; nballs_frame2-1:
            raise Exception("No room left to place objects in Table 2")
        
        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted
        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idLeave = idLeave + 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_Off(TCPi, i, frame2)
        robot.MoveL(target_app)

    robot.MoveJ(target_app_frame)

# Move home when the robot finishes
robot.MoveJ([0,0,0,0,10,-200])
robot.MoveJ([0,0,0,0,10,-200])</pre>
<h2>W12</h2>
<p>Youtube+OBS sitting</p>
<p>1.download OBS studio</p>
<p>2.login YT&gt;建立&gt;go live</p>
<p>3.clone live key</p>
<p>4.Open OBS&gt;sitting&gt;live&gt;paste key</p>
<p>5.Sat f<span>rame by yourself</span></p>
<h2><span>W14</span></h2>
<h1>SSH</h1>
<p>1.ssh(cmd)</p>
<p>2.<code class="js plain">ssh-keygen -t rsa -b 4096 -C </code><code class="js string">"使用者學號"(cmd)</code></p>
<p><code class="js string"></code>3.go to Y:putty/putt/puttgen.exe then pounch genrate</p>
<p>4.save key</p>
<p>5.open putty.exe</p>
<p>6.load "github.com" then enter proxy HTTP [2001:288:6004:17::69] 3128</p>
<p>7.into Auth then browse your ppk(save key)</p>
<p>8.save session</p>
<p>9.add "set GIT_SSH=%Disk%:\putty\plink.exe" in ipv6.bat</p>
<p>10. add "git@github.com:(username)/(Repositories).git</p>
<p>11.set github sshkey then finish</p>